package in.co.sunrays.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import in.co.sunrays.bean.CollegeBean;
import in.co.sunrays.bean.CourseBean;
import in.co.sunrays.bean.FacultyBean;
import in.co.sunrays.bean.MarksheetBean;
import in.co.sunrays.bean.StudentBean;
import in.co.sunrays.bean.SubjectBean;
import in.co.sunrays.exception.ApplicationException;
import in.co.sunrays.exception.DatabaseException;
import in.co.sunrays.exception.DuplicateRecordException;
import in.co.sunrays.util.JDBCDataSource;

public class FacultyModel {

	public Integer nextPK() throws DatabaseException {
		// log.debug("Model nextPK Started");
		Connection conn = null;
		int pk = 0;
		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement pstmt = conn.prepareStatement("SELECT MAX(ID) FROM ST_FACULTY");
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				pk = rs.getInt(1);
			}
			rs.close();

		} catch (Exception e) {
			// log.error("Database Exception..", e);
			throw new DatabaseException("Exception : Exception in getting PK");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}
		// log.debug("Model nextPK End");
		return pk + 1;
	}

	public long add(FacultyBean fb) throws Exception {
		// log.debug("Model add Started");
		Connection conn = null;

		int pk = 0;

		CollegeModel cm = new CollegeModel();
		CollegeBean cb = cm.findByPK(fb.getCollege_id());
		String collegeName = cb.getName();

		CourseModel crsm = new CourseModel();
		CourseBean crsb = crsm.findByPK(fb.getCourse_id());
		String courseName = crsb.getCourse_Name();

		SubjectModel sm = new SubjectModel();
		SubjectBean sb = sm.findByPK(fb.getSubject_id());
		String subjectname = sb.getSubject_Name();

		try {
			conn = JDBCDataSource.getConnection();
			conn.setAutoCommit(false); // Begin transaction
			PreparedStatement ps = conn
					.prepareStatement("INSERT INTO ST_FACULTY VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			ps.setInt(1, nextPK());
			ps.setString(2, fb.getFirst_Name());
			ps.setString(3, fb.getLast_Name());
			ps.setString(4, fb.getGender());
			ps.setDate(5, new java.sql.Date(fb.getDOJ().getTime()));
			ps.setString(6, fb.getQualification());
			ps.setString(7, fb.getEmail_id());
			ps.setString(8, fb.getMobile_No());
			ps.setInt(9, fb.getCollege_id());
			ps.setString(10, collegeName);
			ps.setInt(11, fb.getCourse_id());
			ps.setString(12, courseName);
			ps.setInt(13, fb.getSubject_id());
			ps.setString(14, subjectname);
			ps.setString(15, fb.getCreatedBy());
			ps.setString(16, fb.getModifiedBy());
			ps.setTimestamp(17, fb.getCreatedDatetime());
			ps.setTimestamp(18, fb.getModifiedDatetime());

			ps.executeUpdate();
			conn.commit(); // End transaction
			ps.close();
		} catch (Exception e) {
			e.printStackTrace();
			// log.error("Database Exception..", e);
			e.printStackTrace();
			try {
				conn.rollback();
			} catch (Exception ex) {
				ex.printStackTrace();
				throw new ApplicationException("Exception : add rollback exception " + ex.getMessage());
			}
			e.printStackTrace();
			throw new ApplicationException("Exception : Exception in add Faculty");
		} finally {
			System.out.println("INSERTION DONE");
			JDBCDataSource.closeConnection(conn);
		}
		// log.debug("Model add End");
		return pk;
	}
	public void update(FacultyBean bean) throws ApplicationException, DuplicateRecordException {

		// log.debug("Model update Started");

		Connection conn = null;
	
		// Check if updated Roll no already exist
		if (beanExist != null && beanExist.getId() != bean.getId()) {
			throw new DuplicateRecordException("Roll No is already exist");
		}

		// get Student Name

		StudentModel sModel = new StudentModel();
		StudentBean studentbean = sModel.findByPK(bean.getStudentId());
		bean.setName(studentbean.getFirstName() + " " + studentbean.getLastName());

		try {
			conn = JDBCDataSource.getConnection();

			conn.setAutoCommit(false); // Begin transaction
			PreparedStatement pstmt = conn.prepareStatement("UPDATE ST_MARKSHEET SET ROLL_NO=?,STUDENT_ID=?,NAME=?,PHYSICS=?,CHEMISTRY=?,MATHS=?,CREATED_BY=?,MODIFIED_BY=?,CREATED_DATETIME=?,MODIFIED_DATETIME=? WHERE ID=?");
			pstmt.setString(1, bean.getRollNo());
			pstmt.setLong(2, bean.getStudentId());
			pstmt.setString(3, bean.getName());
			pstmt.setInt(4, bean.getPhysics());
			pstmt.setInt(5, bean.getChemistry());
			pstmt.setInt(6, bean.getMaths());
			pstmt.setString(7, bean.getCreatedBy());
			pstmt.setString(8, bean.getModifiedBy());
			pstmt.setTimestamp(9, bean.getCreatedDatetime());
			pstmt.setTimestamp(10, bean.getModifiedDatetime());
			pstmt.setLong(11, bean.getId());
			pstmt.executeUpdate();
			conn.commit(); // End transaction
			pstmt.close();
		} catch (Exception e) {
			// log.error(e);
			try {
				conn.rollback();
			} catch (Exception ex) {
				throw new ApplicationException("Update rollback exception " + ex.getMessage());
			}
			throw new ApplicationException("Exception in updating Marksheet ");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}

		// log.debug("Model update End");

	}

	public FacultyBean findByPK(int pk) throws ApplicationException {
		// log.debug("Faculty Model findByPK method Started");
		StringBuffer sql = new StringBuffer("SELECT * FROM ST_FACULTY WHERE ID=?");
		Connection conn = null;
		FacultyBean fb = null;
		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(sql.toString());
			ps.setInt(1, pk);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				fb = new FacultyBean();
				fb.setId(rs.getInt(1));
				fb.setFirst_Name(rs.getString(2));
				fb.setLast_Name(rs.getString(3));
				fb.setGender(rs.getString(4));
				fb.setDOJ(rs.getDate(5));
				fb.setQualification(rs.getString(6));
				fb.setEmail_id(rs.getString(7));
				fb.setMobile_No(rs.getString(8));
				fb.setCollege_id(rs.getInt(9));
				fb.setCollege_Name(rs.getString(10));
				fb.setCourse_id(rs.getInt(11));
				fb.setCourse_Name(rs.getString(12));
				fb.setSubject_id(rs.getInt(13));
				fb.setSubject_Name(rs.getString(14));
				fb.setCreatedBy(rs.getString(15));
				fb.setModifiedBy(rs.getString(16));
				fb.setCreatedDatetime(rs.getTimestamp(17));
				fb.setModifiedDatetime(rs.getTimestamp(18));

			}
			rs.close();
		} catch (Exception e) {
			e.printStackTrace();

		} finally {
			JDBCDataSource.closeConnection(conn);
		}
		// log.debug("Faculty Model FindByPK method end");
		return fb;
	}

	public List list() throws ApplicationException {
		return list(0, 0);
	}

	/**
	 * List of Faculty with pagination
	 *
	 */

	public List list(int pageNo, int pageSize) throws ApplicationException {
		// log.debug("Faculty Model List method Started");
		StringBuffer sql = new StringBuffer("SELECT * FROM ST_FACULTY");
		Connection conn = null;
		ArrayList list = new ArrayList();

		// if page is greater than zero then apply pagination
		if (pageSize > 0) {
			pageNo = (pageNo - 1) * pageSize;
			sql.append(" limit " + pageNo + " , " + pageSize);
		}
		try {
			conn = JDBCDataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(sql.toString());
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				FacultyBean fb = new FacultyBean();
				fb.setId(rs.getLong(1));
				fb.setFirst_Name(rs.getString(2));
				fb.setLast_Name(rs.getString(3));
				fb.setGender(rs.getString(4));
				fb.setDOJ(rs.getDate(5));
				fb.setQualification(rs.getString(6));
				fb.setEmail_id(rs.getString(7));
				fb.setMobile_No(rs.getString(8));
				fb.setCollege_id(rs.getInt(9));
				fb.setCollege_Name(rs.getString(10));
				fb.setCourse_id(rs.getInt(11));
				fb.setCourse_Name(rs.getString(12));
				fb.setSubject_id(rs.getInt(13));
				fb.setSubject_Name(rs.getString(14));
				fb.setCreatedBy(rs.getString(15));
				fb.setModifiedBy(rs.getString(16));
				fb.setCreatedDatetime(rs.getTimestamp(17));
				fb.setModifiedDatetime(rs.getTimestamp(18));

				list.add(fb);
			}
			rs.close();
		} catch (Exception e) {
			e.printStackTrace();
			// log.error("Database Exception ......" , e);
			throw new ApplicationException("Exception in list method of FacultyModel");
		} finally {
			JDBCDataSource.closeConnection(conn);
		}
		return list;
	}

}
