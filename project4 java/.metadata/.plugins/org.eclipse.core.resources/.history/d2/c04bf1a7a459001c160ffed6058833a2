package in.co.sunrays.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import in.co.sunrays.bean.SubjectBean;
import in.co.sunrays.bean.CollegeBean;
import in.co.sunrays.bean.StudentBean;
import in.co.sunrays.bean.SubjectBean;
import in.co.sunrays.exception.ApplicationException;
import in.co.sunrays.model.CollegeModel;
import in.co.sunrays.model.SubjectModel;
import in.co.sunrays.util.JDBCDataSource;

public class SubjectModelTest {
	public static void main(String[] args) throws Exception {
		//testAdd();
		//testdelete();
		//testupdate();
		search();
		
		
	}
	
	public static void testAdd() throws Exception {
		try {
			SubjectBean bean = new SubjectBean();
			SubjectModel model=new SubjectModel();
			bean.setSubject_Name("chemistry");
			bean.setCourse_Name("bsc");
			bean.setCourse_Id(301);
			bean.setDescription("dfsda");
			bean.setCreatedBy("Admin");
			bean.setModifiedBy("Admin");
			bean.setCreatedDatetime(new Timestamp(new Date().getTime()));
			bean.setModifiedDatetime(new Timestamp(new Date().getTime()));
			long pk = model.add(bean);
			SubjectBean addedBean = model.findByPK(pk);
			if (addedBean == null) {
				System.out.println("Test add fail");
			}
		} catch (ApplicationException e) {
			e.printStackTrace();
		}
	}
			public static void testdelete() throws Exception {
				
				try{
					
				SubjectBean bean = new SubjectBean();
				SubjectModel model=new SubjectModel();
				bean.setId(1L);
				model.delete(bean);
				SubjectBean addedBean = model.findByPK(1L);
				if (addedBean == null) {
					System.out.println("Test add fail");
				}
			} catch (ApplicationException e) {
				e.printStackTrace();
			}
	}

			private static void testupdate() throws Exception {
				
				try {
				
					SubjectModel model=new SubjectModel();
					SubjectBean bean = model.findByPK(1);
					bean.setSubject_Name("chesdmi");
					bean.setCourse_Name("bsc");
					bean.setCourse_Id(301);
					bean.setDescription("dfsda");
					bean.setCreatedBy("Admin");
					bean.setModifiedBy("Admin");
					bean.setCreatedDatetime(new Timestamp(new Date().getTime()));
					bean.setModifiedDatetime(new Timestamp(new Date().getTime()));
					model.update(bean);
					SubjectBean addedBean = model.findByPK(1);
					if (addedBean == null) {
						System.out.println("Test add fail");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			public List search(SubjectBean bean, int pageNo, int pageSize) throws ApplicationException {
				//log.debug("Model search Started");
				StringBuffer sql = new StringBuffer("SELECT * FROM ST_SUBJECT WHERE 1=1");

				if (bean != null) {
					if (bean.getId() > 0) {
						sql.append(" AND id = " + bean.getId());
					}
					if (bean.getSubject_Name() != null && bean.getSubject_Name().length() > 0) {
						sql.append(" AND NAME like '" + bean.getSubject_Name() + "%'");
					}
					if (bean.getCourse_Name() != null && bean.getCourse_Name().length() > 0) {
						sql.append(" AND ADDRESS like '" + bean.getCourse_Name() + "%'");
					}
					if (bean.getDescription() != null && bean.getDescription().length() > 0) {
						sql.append(" AND STATE like '" + bean.getDescription() + "%'");
					}
				}

				// if page size is greater than zero then apply pagination
				if (pageSize > 0) {
					// Calculate start record index
					pageNo = (pageNo - 1) * pageSize;

					sql.append(" Limit " + pageNo + ", " + pageSize);
					// sql.append(" limit " + pageNo + "," + pageSize);
				}

				ArrayList list = new ArrayList();
				Connection conn = null;
				try {
					conn = JDBCDataSource.getConnection();
					PreparedStatement pstmt = conn.prepareStatement(sql.toString());
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						bean = new SubjectBean();
						bean.setId(rs.getLong(1));
						bean.setSubject_Name(rs.getString(2));
						bean.setCourse_Name(rs.getString(3));
						bean.setCourse_Id(rs.getInt(4));
						bean.setDescription(rs.getString(5));
						bean.setCreatedBy(rs.getString(6));
						bean.setModifiedBy(rs.getString(7));
						bean.setCreatedDatetime(rs.getTimestamp(8));
						bean.setModifiedDatetime(rs.getTimestamp(19));
						list.add(bean);
					}
					rs.close();
				} catch (Exception e) {
					//log.error("Database Exception..", e);
					e.printStackTrace();
					throw new ApplicationException("Exception : Exception in search college");
				} finally {
					JDBCDataSource.closeConnection(conn);
				}

				//log.debug("Model search End");
				return list;
			}
			}

